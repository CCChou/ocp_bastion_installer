---
- name: Install httpd
  ansible.builtin.yum:
    name: httpd
    state: latest

- name: Install net-tools
  ansible.builtin.yum:
    name: net-tools
    state: latest

- name: Modify httpd configuration
  ansible.builtin.lineinfile:
    path: /etc/httpd/conf/httpd.conf
    regexp: "^Listen"
    line: "Listen 8080"
  notify:
  - restart httpd

- name: Force httpd service restart for httpd check tasks
  ansible.builtin.meta: flush_handlers

- name: Check ocp install cli exists
  ansible.builtin.stat:
    path: /usr/bin/openshift-install
  register: install_cli

- name: Extract ocp install cli
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ ocpInstallDir }}"
    dest: /usr/bin/
    list_files: true
  register: unarchive_install_cli
  when: install_cli.stat.exists == False

- name: Move unarchive_install_cli file to openshift-install
  when: install_cli.stat.exists == False and unarchive_install_cli.files != 'openshift-install'
  block:
    - name: Copy file to openshift-install
      ansible.builtin.copy:
        remote_src: true
        src: /usr/bin/{{ unarchive_install_cli.files[0]}}
        dest: /usr/bin/openshift-install
        mode: preserve
    - name: Remove file
      ansible.builtin.file:
        path: /usr/bin/{{ unarchive_install_cli.files[0]}}
        state: absent

- name: Check ocp client cli exists
  ansible.builtin.stat:
    path: /usr/bin/oc
  register: client_cli

- name: Extract ocp client cli
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ ocpClientDir }}"
    dest: /usr/bin/
  when: client_cli.stat.exists == False

- name: Bash completion for oc command
  ansible.builtin.shell: "oc completion bash > /etc/bash_completion.d/oc_bash_completion"

- name: Check install dir exists
  ansible.builtin.stat:
    path: /root/ocp4
  register: install_dir

- name: Remove old install dir
  ansible.builtin.file:
    path: /root/ocp4
    state: absent
  when: install_dir.stat.exists == True

- name: Create install dir
  ansible.builtin.file:
    path: /root/ocp4
    state: directory
    mode: 0755

- name: Get pull secret value
  ansible.builtin.command: "cat {{ pullSecretDir }}"
  register: pullsecret
  when: online

- name: Get ssh key value
  ansible.builtin.command: "cat {{ sshKeyDir }}"
  register: sshkey

- name: Get CA value
  ansible.builtin.slurp:
    src: "{{ quayRoot }}/quay-rootCA/rootCA.pem"
  register: mirrorRegistryCA
  when: not online 

- name: Create install config
  ansible.builtin.template:
    src: install-config.j2
    dest: /root/ocp4/install-config.yaml

- name: Copy install dir
  ansible.builtin.copy:
    remote_src: true
    src: /root/ocp4/
    dest: /root/ocp4-backup
    mode: preserve

- name: Generate manifests
  ansible.builtin.command: openshift-install create manifests --dir=/root/ocp4

#/root/install_source/butane-amd64 99-worker-chrony.bu -o 99-worker-chrony.yaml
#- name: Add chrony machineConfig
#  ansible.builtin.copy:
#    remote_src: yes
#    src: "^[\\s]*mastersSchedulable"
#    dest: /root/ocp4/openshift/99-master-chrony.yaml
#    line: "  mastersSchedulable: false"
#
#- name: Add chrony machineConfig
#  ansible.builtin.copy:
#    remote_src: yes
#    src: "^[\\s]*mastersSchedulable"
#    dest: /root/ocp4/openshift/99-worker-chrony.yaml
#    line: "  mastersSchedulable: false"
#  when: mode != 'compact'
  
- name: Modify scheduler config
  ansible.builtin.lineinfile:
    path: /root/ocp4/manifests/cluster-scheduler-02-config.yml
    regexp: "^[\\s]*mastersSchedulable"
    line: "  mastersSchedulable: false"
  when: mode != 'compact'

- name: Generate ignition files
  ansible.builtin.command: openshift-install create ignition-configs --dir=/root/ocp4

- name: Find old ignition files
  ansible.builtin.find:
    paths: /var/www/html
    patterns: '*.ign'
  register: old_ign_files

- name: Remove old ignition files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ old_ign_files.files }}"

- name: Find all .ign files in /root/ocp4
  ansible.builtin.find:
    paths: /root/ocp4
    patterns: '*.ign'
  register: ign_files

- name: Copy .ign files to /var/www/html
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "/var/www/html/{{ item.path | basename }}"
    remote_src: yes
    mode: preserve
  loop: "{{ ign_files.files }}"

- name: Create install.sh script
  ansible.builtin.copy:
    dest: /var/www/html/install.sh
    mode: '0755'
    content: |
      #!/bin/bash

      # curl http://['bastion ip']:8080/install.sh | bash -s - /dev/sda worker

      DEVICE="$1"
      ROLE="$2"

      if [ -z "$DEVICE" ] || [ -z "$ROLE" ]; then
        echo "Usage: $0 <device> <role>"
        exit 1
      fi

      echo "Installing CoreOS to $DEVICE using role $ROLE..."
      coreos-installer install "$DEVICE" \
        -I http://{{ bastion.ip }}:8080/${ROLE}.ign \
        --insecure-ignition -n

- name: Granted read permission for httpd files
  ansible.builtin.file:
    path: /var/www/html
    state: directory
    recurse: yes
    mode: u=rw,g=r,o=rX

